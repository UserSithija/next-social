// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
   clerkId String  @unique
   username String @unique
   avatar String?
   cover String?
   name String?
   surname String?
   desc  String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like []
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestSent FollowRequest[] @relation("FollowRequestSent")
  followRequestRecevied FollowRequest[] @relation("FollowRequestRecevied")
  blocks Block[] @relation("blockSent")
  blockedBy Block[] @relation("blockRecevied")
  stories Story[]

}
model Post {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
   desc String
   img String?
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   user User @relation(fields: [userId],references: [clerkId],onDelete:Cascade)
   userId String
   likes Like[] 
   comments Comment[]
}
model Like {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
   createdAt DateTime @default(now())
  
   user User @relation(fields: [userId],references: [clerkId],onDelete:Cascade)
   userId String
   post Post? @relation(fields: [postId],references: [id],onDelete:Cascade)
   postId String? @db.ObjectId
   comment Comment? @relation(fields: [commentId],references: [id],onDelete:Cascade)
   commentId String? @db.ObjectId

  
}
model Comment {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   desc String
   user User @relation(fields: [userId],references: [clerkId],onDelete:Cascade)
   userId String
   post Post @relation(fields: [postId],references: [id],onDelete:Cascade)
   postId String @db.ObjectId
   likes Like[]
}
model Follower{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers",fields: [followerId],references: [clerkId],onDelete:Cascade)
  followerId String 
  following User @relation("UserFollowings",fields: [followingId],references: [clerkId],onDelete:Cascade)
  followingId String 
}
model FollowRequest{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestSent",fields: [senderId],references: [clerkId],onDelete:Cascade)
  senderId String 
  receiver User @relation("FollowRequestRecevied",fields: [recevierId],references: [clerkId],onDelete:Cascade)
  recevierId String 
  
}
model Block{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blokSent User @relation("blockSent",fields: [blockerId],references: [clerkId],onDelete:Cascade)
  blockerId String 
  blockRecevied User @relation("blockRecevied",fields: [blockedId],references: [clerkId],onDelete:Cascade)
  blockedId String 
  


}

model Story{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime
  img String
  user User @relation(fields: [userId],references: [clerkId],onDelete:Cascade)
  userId String  @unique
  


}

